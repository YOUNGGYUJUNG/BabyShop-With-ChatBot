name: aws EC2 CICD with Docker

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소의 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle 빌드
      - name: Build Gradle
        run: ./gradlew clean build -x test --stacktrace

      # 5. SSH 에이전트 설정 (AWS 배포에 사용될 프라이빗 키)
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.KORAIL_SSH_KEY_YOUNGGYU }}

      ## Docker 이미지 빌드 및 푸시 (Docker Compose 사용) ##
      - name: Docker Build & Push
        if: contains(github.ref, 'main')
        run: |
          docker login -u "wjddudrb190" -p "${{ secrets.DOCKER_PASSWORD_YOUNGGYU }}"
          docker compose -f compose.yaml build
          docker compose -f compose.yaml push

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.ref, 'main')
    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. SSH 에이전트 설정 (AWS 배포에 사용될 프라이빗 키)
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.KORAIL_SSH_KEY_YOUNGGYU }}

      # 3. AWS EC2 배포 스크립트 실행
      - name: Deploy to AWS EC2
        if: contains(github.ref, 'main')
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.AWS_HOST_YOUNGGYU }} << 'EOF'
            sudo su
            cd /projects/backend-practice-room-korail
            docker-compose -f compose.yaml down || true
            docker-compose -f compose.yaml pull
            docker-compose -f compose.yaml up -d
            docker image prune -a -f
          EOF
